//---------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by T4Model template for T4 (https://github.com/linq2db/linq2db).
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------

#pragma warning disable 1591

using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;

using LinqToDB;
using LinqToDB.Common;
using LinqToDB.Data;
using LinqToDB.DataProvider.SqlServer;
using LinqToDB.Extensions;
using LinqToDB.Mapping;

namespace Classlibrary.Dao.Linq2Db
{
	/// <summary>
	/// Database       : PRACTISEV1
	/// Data Source    : healthneutron-dev.database.windows.net,1433
	/// Server Version : 12.00.1100
	/// </summary>
	public partial class PRACTISEV1DB : LinqToDB.Data.DataConnection
	{

		#region Schemas

		public AdministrationSchema.DataContext Administration { get; set; }
		public sysSchema.DataContext            sys            { get; set; }
		public UtilitySchema.DataContext        Utility        { get; set; }

		public void InitSchemas()
		{
			Administration = new AdministrationSchema.DataContext(this);
			sys            = new sysSchema.           DataContext(this);
			Utility        = new UtilitySchema.       DataContext(this);
		}

		#endregion

		public PRACTISEV1DB()
		{
			InitSchemas();
			InitDataContext();
			InitMappingSchema();
		}

		public PRACTISEV1DB(string configuration)
			: base(configuration)
		{
			InitSchemas();
			InitDataContext();
			InitMappingSchema();
		}

		partial void InitDataContext  ();
		partial void InitMappingSchema();

		#region FreeTextTable

		public class FreeTextKey<T>
		{
			public T   Key;
			public int Rank;
		}

		private static MethodInfo _freeTextTableMethod1 = typeof(PRACTISEV1DB).GetMethod("FreeTextTable", new Type[] { typeof(string), typeof(string) });

		[FreeTextTableExpression]
		public ITable<FreeTextKey<TKey>> FreeTextTable<TTable, TKey>(string field, string text)
		{
			return this.GetTable<FreeTextKey<TKey>>(
				this,
				_freeTextTableMethod1,
				field,
				text);
		}

		private static MethodInfo _freeTextTableMethod2 = 
			typeof(PRACTISEV1DB).GetMethods()
				.Where(m => m.Name == "FreeTextTable" &&  m.IsGenericMethod && m.GetParameters().Length == 2)
				.Where(m => m.GetParameters()[0].ParameterType.IsGenericTypeEx() && m.GetParameters()[0].ParameterType.GetGenericTypeDefinition() == typeof(Expression<>))
				.Where(m => m.GetParameters()[1].ParameterType == typeof(string))
				.Single();

		[FreeTextTableExpression]
		public ITable<FreeTextKey<TKey>> FreeTextTable<TTable, TKey>(Expression<Func<TTable,string>> fieldSelector, string text)
		{
			return this.GetTable<FreeTextKey<TKey>>(
				this,
				_freeTextTableMethod2,
				fieldSelector,
				text);
		}

		#endregion
	}

	public static partial class AdministrationSchema
	{
		public partial class DataContext
		{
			public ITable<User>        Users        { get { return _dataContext.GetTable<User>(); } }
			public ITable<UserClaim>   UserClaims   { get { return _dataContext.GetTable<UserClaim>(); } }
			public ITable<UserProfile> UserProfiles { get { return _dataContext.GetTable<UserProfile>(); } }

			private readonly IDataContext _dataContext;

			public DataContext(IDataContext dataContext)
			{
				_dataContext = dataContext;
			}
		}

		[Table(Schema="Administration", Name="Users")]
		public partial class User
		{
			[Identity               ] public int       Ci                            { get; set; } // int
			[PrimaryKey, NotNull    ] public Guid      Id                            { get; set; } // uniqueidentifier
			[Column,     NotNull    ] public string    UserName                      { get; set; } // nvarchar(256)
			[Column,     NotNull    ] public string    Email                         { get; set; } // nvarchar(256)
			[Column,     NotNull    ] public bool      EmailConfirmed                { get; set; } // bit
			[Column,     NotNull    ] public string    PasswordHash                  { get; set; } // nvarchar(max)
			[Column,     NotNull    ] public string    SecurityStamp                 { get; set; } // nvarchar(256)
			[Column,        Nullable] public string    PhoneNumber                   { get; set; } // nvarchar(256)
			[Column,     NotNull    ] public bool      PhoneNumberConfirmed          { get; set; } // bit
			[Column,        Nullable] public string    MobileNumber                  { get; set; } // nvarchar(256)
			[Column,     NotNull    ] public bool      TwoFactorEnabled              { get; set; } // bit
			[Column,        Nullable] public DateTime? LockoutEndDateUtc             { get; set; } // datetime
			[Column,     NotNull    ] public bool      LockoutEnabled                { get; set; } // bit
			[Column,     NotNull    ] public int       AccessFailedCount             { get; set; } // int
			[Column,     NotNull    ] public DateTime  CreatedOn                     { get; set; } // datetime
			[Column,     NotNull    ] public DateTime  ChangedOn                     { get; set; } // datetime
			[Column,        Nullable] public DateTime? DeletedOn                     { get; set; } // datetime
			[Column,        Nullable] public DateTime? DeactivatedDate               { get; set; } // datetime
			[Column,        Nullable] public string    Udf1                          { get; set; } // nvarchar(512)
			[Column,        Nullable] public string    Udf2                          { get; set; } // nvarchar(512)
			[Column,        Nullable] public string    Udf3                          { get; set; } // nvarchar(512)
			[Column,     NotNull    ] public bool      MobileNumberConfirmed         { get; set; } // bit
			[Column,        Nullable] public string    NationalId                    { get; set; } // nvarchar(512)
			[Column,        Nullable] public DateTime? NationalIdVerificationDateUtc { get; set; } // datetime

			#region Associations

			/// <summary>
			/// FK_Administration_UserClaim_Users_BackReference
			/// </summary>
			[Association(ThisKey="Id", OtherKey="UserId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
			public IEnumerable<AdministrationSchema.UserClaim> UserClaims { get; set; }

			/// <summary>
			/// FK_Administration_UserProfile_Users_BackReference
			/// </summary>
			[Association(ThisKey="Id", OtherKey="UserId", CanBeNull=true, Relationship=Relationship.OneToOne, IsBackReference=true)]
			public AdministrationSchema.UserProfile UserProfile { get; set; }

			#endregion
		}

		[Table(Schema="Administration", Name="UserClaim")]
		public partial class UserClaim
		{
			[Identity              ] public int    Ci         { get; set; } // int
			[PrimaryKey(1), NotNull] public Guid   UserId     { get; set; } // uniqueidentifier
			[PrimaryKey(2), NotNull] public string ClaimType  { get; set; } // nvarchar(256)
			[PrimaryKey(3), NotNull] public string ClaimValue { get; set; } // nvarchar(256)

			#region Associations

			/// <summary>
			/// FK_Administration_UserClaim_Users
			/// </summary>
			[Association(ThisKey="UserId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_Administration_UserClaim_Users", BackReferenceName="UserClaims")]
			public AdministrationSchema.User User { get; set; }

			#endregion
		}

		[Table(Schema="Administration", Name="UserProfile")]
		public partial class UserProfile
		{
			[Identity               ] public int       Ci            { get; set; } // int
			[PrimaryKey, NotNull    ] public Guid      UserId        { get; set; } // uniqueidentifier
			[Column,     NotNull    ] public string    FirstName     { get; set; } // nvarchar(256)
			[Column,     NotNull    ] public string    LastName      { get; set; } // nvarchar(256)
			[Column,     NotNull    ] public Guid      UserTypeId    { get; set; } // uniqueidentifier
			[Column,        Nullable] public string    Title         { get; set; } // nvarchar(256)
			[Column,        Nullable] public string    Suffix        { get; set; } // nvarchar(256)
			[Column,        Nullable] public string    Prefix        { get; set; } // nvarchar(256)
			[Column,        Nullable] public string    PrefferedName { get; set; } // nvarchar(256)
			[Column,        Nullable] public DateTime? Dob           { get; set; } // date
			[Column,     NotNull    ] public Guid      GenderId      { get; set; } // uniqueidentifier
			[Column,     NotNull    ] public Guid      CountryId     { get; set; } // uniqueidentifier
			[Column,        Nullable] public string    Organization  { get; set; } // nvarchar(256)
			[Column,        Nullable] public string    Department    { get; set; } // nvarchar(256)
			[Column,        Nullable] public string    PictureUrl    { get; set; } // nvarchar(1024)
			[Column,        Nullable] public string    Udf1          { get; set; } // nvarchar(512)
			[Column,        Nullable] public string    Udf2          { get; set; } // nvarchar(512)
			[Column,        Nullable] public string    Udf3          { get; set; } // nvarchar(512)

			#region Associations

			/// <summary>
			/// FK_Administration_UserProfile_ReferenceItem_Country
			/// </summary>
			[Association(ThisKey="CountryId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_Administration_UserProfile_ReferenceItem_Country", BackReferenceName="AdministrationUserProfileCountries")]
			public UtilitySchema.ReferenceItem Country { get; set; }

			/// <summary>
			/// FK_Administration_UserProfile_ReferenceItem_Gender
			/// </summary>
			[Association(ThisKey="GenderId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_Administration_UserProfile_ReferenceItem_Gender", BackReferenceName="AdministrationUserProfileGenders")]
			public UtilitySchema.ReferenceItem Gender { get; set; }

			/// <summary>
			/// FK_Administration_UserProfile_Users
			/// </summary>
			[Association(ThisKey="UserId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.OneToOne, KeyName="FK_Administration_UserProfile_Users", BackReferenceName="UserProfile")]
			public AdministrationSchema.User User { get; set; }

			/// <summary>
			/// FK_Administration_UserProfile_ReferenceItem_UserType
			/// </summary>
			[Association(ThisKey="UserTypeId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_Administration_UserProfile_ReferenceItem_UserType", BackReferenceName="AdministrationUserProfileUserTypes")]
			public UtilitySchema.ReferenceItem UserType { get; set; }

			#endregion
		}

		public static partial class SqlFunctions
		{
			#region FuncCheckValidClaimType

			[Sql.Function(Name="Administration.FuncCheckValidClaimType", ServerSideOnly=true)]
			public static int? FuncCheckValidClaimType(string @claimType)
			{
				throw new InvalidOperationException();
			}

			#endregion

			#region FuncCheckValidClaimValue

			[Sql.Function(Name="Administration.FuncCheckValidClaimValue", ServerSideOnly=true)]
			public static int? FuncCheckValidClaimValue(string @claimValue)
			{
				throw new InvalidOperationException();
			}

			#endregion
		}

		#region Table Extensions

		public static User Find(this ITable<User> table, Guid Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static UserClaim Find(this ITable<UserClaim> table, Guid UserId, string ClaimType, string ClaimValue)
		{
			return table.FirstOrDefault(t =>
				t.UserId     == UserId    &&
				t.ClaimType  == ClaimType &&
				t.ClaimValue == ClaimValue);
		}

		public static UserProfile Find(this ITable<UserProfile> table, Guid UserId)
		{
			return table.FirstOrDefault(t =>
				t.UserId == UserId);
		}

		#endregion
	}

	public static partial class sysSchema
	{
		public partial class DataContext
		{
			public ITable<DatabaseFirewallRule> DatabaseFirewallRules { get { return _dataContext.GetTable<DatabaseFirewallRule>(); } }

			private readonly IDataContext _dataContext;

			public DataContext(IDataContext dataContext)
			{
				_dataContext = dataContext;
			}
		}

		[Table(Schema="sys", Name="database_firewall_rules", IsView=true)]
		public partial class DatabaseFirewallRule
		{
			[Column("id"),               Identity] public int      Id             { get; set; } // int
			[Column("name"),             NotNull ] public string   Name           { get; set; } // nvarchar(128)
			[Column("start_ip_address"), NotNull ] public string   StartIpAddress { get; set; } // varchar(45)
			[Column("end_ip_address"),   NotNull ] public string   EndIpAddress   { get; set; } // varchar(45)
			[Column("create_date"),      NotNull ] public DateTime CreateDate     { get; set; } // datetime
			[Column("modify_date"),      NotNull ] public DateTime ModifyDate     { get; set; } // datetime
		}
	}

	public static partial class UtilitySchema
	{
		public partial class DataContext
		{
			public ITable<Reference>     References     { get { return _dataContext.GetTable<Reference>(); } }
			public ITable<ReferenceItem> ReferenceItems { get { return _dataContext.GetTable<ReferenceItem>(); } }

			private readonly IDataContext _dataContext;

			public DataContext(IDataContext dataContext)
			{
				_dataContext = dataContext;
			}
		}

		[Table(Schema="Utility", Name="Reference")]
		public partial class Reference
		{
			[Identity               ] public int       Ci          { get; set; } // int
			[PrimaryKey, NotNull    ] public Guid      Id          { get; set; } // uniqueidentifier
			[Column,     NotNull    ] public string    Name        { get; set; } // nvarchar(256)
			[Column,        Nullable] public string    Description { get; set; } // nvarchar(512)
			[Column,     NotNull    ] public string    CountryCode { get; set; } // nvarchar(2)
			[Column,        Nullable] public DateTime? Archived    { get; set; } // datetime
			[Column,     NotNull    ] public DateTime  CreatedOn   { get; set; } // datetime
			[Column,     NotNull    ] public DateTime  ChangedOn   { get; set; } // datetime

			#region Associations

			/// <summary>
			/// FK_Utility_ReferenceItem_Reference_BackReference
			/// </summary>
			[Association(ThisKey="Id", OtherKey="ReferenceId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
			public IEnumerable<UtilitySchema.ReferenceItem> ReferenceItems { get; set; }

			#endregion
		}

		[Table(Schema="Utility", Name="ReferenceItem")]
		public partial class ReferenceItem
		{
			[Identity               ] public int       Ci          { get; set; } // int
			[PrimaryKey, NotNull    ] public Guid      Id          { get; set; } // uniqueidentifier
			[Column,     NotNull    ] public Guid      ReferenceId { get; set; } // uniqueidentifier
			[Column,     NotNull    ] public string    Code        { get; set; } // nvarchar(256)
			[Column,     NotNull    ] public string    Description { get; set; } // nvarchar(512)
			[Column,        Nullable] public DateTime? Archived    { get; set; } // datetime
			[Column,     NotNull    ] public DateTime  CreatedOn   { get; set; } // datetime
			[Column,     NotNull    ] public DateTime  ChangedOn   { get; set; } // datetime
			[Column,        Nullable] public string    Udf1        { get; set; } // nvarchar(max)
			[Column,        Nullable] public string    Udf2        { get; set; } // nvarchar(max)
			[Column,        Nullable] public string    Udf3        { get; set; } // nvarchar(max)

			#region Associations

			/// <summary>
			/// FK_Administration_UserProfile_ReferenceItem_Country_BackReference
			/// </summary>
			[Association(ThisKey="Id", OtherKey="CountryId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
			public IEnumerable<AdministrationSchema.UserProfile> AdministrationUserProfileCountries { get; set; }

			/// <summary>
			/// FK_Administration_UserProfile_ReferenceItem_Gender_BackReference
			/// </summary>
			[Association(ThisKey="Id", OtherKey="GenderId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
			public IEnumerable<AdministrationSchema.UserProfile> AdministrationUserProfileGenders { get; set; }

			/// <summary>
			/// FK_Administration_UserProfile_ReferenceItem_UserType_BackReference
			/// </summary>
			[Association(ThisKey="Id", OtherKey="UserTypeId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
			public IEnumerable<AdministrationSchema.UserProfile> AdministrationUserProfileUserTypes { get; set; }

			/// <summary>
			/// FK_Utility_ReferenceItem_Reference
			/// </summary>
			[Association(ThisKey="ReferenceId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_Utility_ReferenceItem_Reference", BackReferenceName="ReferenceItems")]
			public UtilitySchema.Reference Reference { get; set; }

			#endregion
		}

		#region Table Extensions

		public static Reference Find(this ITable<Reference> table, Guid Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static ReferenceItem Find(this ITable<ReferenceItem> table, Guid Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		#endregion
	}
}

#pragma warning restore 1591
