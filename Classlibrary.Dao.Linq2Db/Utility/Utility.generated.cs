//---------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by T4Model template for T4 (https://github.com/linq2db/linq2db).
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------

#pragma warning disable 1591

using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;

using LinqToDB;
using LinqToDB.DataProvider.SqlServer;
using LinqToDB.Extensions;
using LinqToDB.Mapping;

namespace Classlibrary.Dao.Linq2Db.Utility
{
	/// <summary>
	/// Database       : PRACTISEV1
	/// Data Source    : healthneutron-dev.database.windows.net,1433
	/// Server Version : 12.00.1100
	/// </summary>
	public partial class PRACTISEV1DB : LinqToDB.Data.DataConnection
	{
		public ITable<Reference>     References     { get { return this.GetTable<Reference>(); } }
		public ITable<ReferenceItem> ReferenceItems { get { return this.GetTable<ReferenceItem>(); } }

		public PRACTISEV1DB()
		{
			InitDataContext();
			InitMappingSchema();
		}

		public PRACTISEV1DB(string configuration)
			: base(configuration)
		{
			InitDataContext();
			InitMappingSchema();
		}

		partial void InitDataContext  ();
		partial void InitMappingSchema();

		#region FreeTextTable

		public class FreeTextKey<T>
		{
			public T   Key;
			public int Rank;
		}

		private static MethodInfo _freeTextTableMethod1 = typeof(PRACTISEV1DB).GetMethod("FreeTextTable", new Type[] { typeof(string), typeof(string) });

		[FreeTextTableExpression]
		public ITable<FreeTextKey<TKey>> FreeTextTable<TTable, TKey>(string field, string text)
		{
			return this.GetTable<FreeTextKey<TKey>>(
				this,
				_freeTextTableMethod1,
				field,
				text);
		}

		private static MethodInfo _freeTextTableMethod2 = 
			typeof(PRACTISEV1DB).GetMethods()
				.Where(m => m.Name == "FreeTextTable" &&  m.IsGenericMethod && m.GetParameters().Length == 2)
				.Where(m => m.GetParameters()[0].ParameterType.IsGenericTypeEx() && m.GetParameters()[0].ParameterType.GetGenericTypeDefinition() == typeof(Expression<>))
				.Where(m => m.GetParameters()[1].ParameterType == typeof(string))
				.Single();

		[FreeTextTableExpression]
		public ITable<FreeTextKey<TKey>> FreeTextTable<TTable, TKey>(Expression<Func<TTable,string>> fieldSelector, string text)
		{
			return this.GetTable<FreeTextKey<TKey>>(
				this,
				_freeTextTableMethod2,
				fieldSelector,
				text);
		}

		#endregion
	}

	[Table(Schema="Utility", Name="Reference")]
	public partial class Reference
	{
		[Identity               ] public int       Ci          { get; set; } // int
		[PrimaryKey, NotNull    ] public Guid      Id          { get; set; } // uniqueidentifier
		[Column,     NotNull    ] public string    Name        { get; set; } // nvarchar(256)
		[Column,        Nullable] public string    Description { get; set; } // nvarchar(512)
		[Column,     NotNull    ] public string    CountryCode { get; set; } // nvarchar(2)
		[Column,        Nullable] public DateTime? Archived    { get; set; } // datetime
		[Column,     NotNull    ] public DateTime  CreatedOn   { get; set; } // datetime
		[Column,     NotNull    ] public DateTime  ChangedOn   { get; set; } // datetime

		#region Associations

		/// <summary>
		/// FK_Utility_ReferenceItem_Reference_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="ReferenceId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<ReferenceItem> ReferenceItems { get; set; }

		#endregion
	}

	[Table(Schema="Utility", Name="ReferenceItem")]
	public partial class ReferenceItem
	{
		[Identity               ] public int       Ci          { get; set; } // int
		[PrimaryKey, NotNull    ] public Guid      Id          { get; set; } // uniqueidentifier
		[Column,     NotNull    ] public Guid      ReferenceId { get; set; } // uniqueidentifier
		[Column,     NotNull    ] public string    Code        { get; set; } // nvarchar(256)
		[Column,     NotNull    ] public string    Description { get; set; } // nvarchar(512)
		[Column,        Nullable] public DateTime? Archived    { get; set; } // datetime
		[Column,     NotNull    ] public DateTime  CreatedOn   { get; set; } // datetime
		[Column,     NotNull    ] public DateTime  ChangedOn   { get; set; } // datetime
		[Column,        Nullable] public string    Udf1        { get; set; } // nvarchar(max)
		[Column,        Nullable] public string    Udf2        { get; set; } // nvarchar(max)
		[Column,        Nullable] public string    Udf3        { get; set; } // nvarchar(max)

		#region Associations

		/// <summary>
		/// FK_Utility_ReferenceItem_Reference
		/// </summary>
		[Association(ThisKey="ReferenceId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_Utility_ReferenceItem_Reference", BackReferenceName="ReferenceItems")]
		public Reference Reference { get; set; }

		#endregion
	}

	public static partial class TableExtensions
	{
		public static Reference Find(this ITable<Reference> table, Guid Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static ReferenceItem Find(this ITable<ReferenceItem> table, Guid Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}
	}
}

#pragma warning restore 1591
