//---------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by T4Model template for T4 (https://github.com/linq2db/linq2db).
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------

#pragma warning disable 1591

using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;

using LinqToDB;
using LinqToDB.Common;
using LinqToDB.Data;
using LinqToDB.DataProvider.SqlServer;
using LinqToDB.Extensions;
using LinqToDB.Mapping;

namespace Classlibrary.Dao.Linq2Db.Administration
{
	/// <summary>
	/// Database       : PRACTISEV1
	/// Data Source    : healthneutron-dev.database.windows.net,1433
	/// Server Version : 12.00.1100
	/// </summary>
	public partial class PRACTISEV1DB : LinqToDB.Data.DataConnection
	{
		public ITable<Administration_User>        Users        { get { return this.GetTable<Administration_User>(); } }
		public ITable<Administration_UserClaim>   UserClaims   { get { return this.GetTable<Administration_UserClaim>(); } }
		public ITable<Administration_UserProfile> UserProfiles { get { return this.GetTable<Administration_UserProfile>(); } }

		public PRACTISEV1DB()
		{
			InitDataContext();
			InitMappingSchema();
		}

		public PRACTISEV1DB(string configuration)
			: base(configuration)
		{
			InitDataContext();
			InitMappingSchema();
		}

		partial void InitDataContext  ();
		partial void InitMappingSchema();

		#region FreeTextTable

		public class FreeTextKey<T>
		{
			public T   Key;
			public int Rank;
		}

		private static MethodInfo _freeTextTableMethod1 = typeof(PRACTISEV1DB).GetMethod("FreeTextTable", new Type[] { typeof(string), typeof(string) });

		[FreeTextTableExpression]
		public ITable<FreeTextKey<TKey>> FreeTextTable<TTable, TKey>(string field, string text)
		{
			return this.GetTable<FreeTextKey<TKey>>(
				this,
				_freeTextTableMethod1,
				field,
				text);
		}

		private static MethodInfo _freeTextTableMethod2 = 
			typeof(PRACTISEV1DB).GetMethods()
				.Where(m => m.Name == "FreeTextTable" &&  m.IsGenericMethod && m.GetParameters().Length == 2)
				.Where(m => m.GetParameters()[0].ParameterType.IsGenericTypeEx() && m.GetParameters()[0].ParameterType.GetGenericTypeDefinition() == typeof(Expression<>))
				.Where(m => m.GetParameters()[1].ParameterType == typeof(string))
				.Single();

		[FreeTextTableExpression]
		public ITable<FreeTextKey<TKey>> FreeTextTable<TTable, TKey>(Expression<Func<TTable,string>> fieldSelector, string text)
		{
			return this.GetTable<FreeTextKey<TKey>>(
				this,
				_freeTextTableMethod2,
				fieldSelector,
				text);
		}

		#endregion
	}

	[Table(Schema="Administration", Name="Users")]
	public partial class Administration_User
	{
		[Identity               ] public int       Ci                   { get; set; } // int
		[PrimaryKey, NotNull    ] public Guid      Id                   { get; set; } // uniqueidentifier
		[Column,     NotNull    ] public string    UserName             { get; set; } // nvarchar(256)
		[Column,     NotNull    ] public string    Email                { get; set; } // nvarchar(256)
		[Column,     NotNull    ] public bool      EmailConfirmed       { get; set; } // bit
		[Column,     NotNull    ] public string    PasswordHash         { get; set; } // nvarchar(max)
		[Column,     NotNull    ] public string    SecurityStamp        { get; set; } // nvarchar(256)
		[Column,        Nullable] public string    PhoneNumber          { get; set; } // nvarchar(256)
		[Column,     NotNull    ] public bool      PhoneNumberConfirmed { get; set; } // bit
		[Column,        Nullable] public string    MobileNumber         { get; set; } // nvarchar(256)
		[Column,     NotNull    ] public bool      TwoFactorEnabled     { get; set; } // bit
		[Column,        Nullable] public DateTime? LockoutEndDateUtc    { get; set; } // datetime
		[Column,     NotNull    ] public bool      LockoutEnabled       { get; set; } // bit
		[Column,     NotNull    ] public int       AccessFailedCount    { get; set; } // int
		[Column,     NotNull    ] public DateTime  CreatedOn            { get; set; } // datetime
		[Column,     NotNull    ] public DateTime  ChangedOn            { get; set; } // datetime
		[Column,        Nullable] public DateTime? DeletedOn            { get; set; } // datetime
		[Column,        Nullable] public DateTime? DeactivatedDate      { get; set; } // datetime
		[Column,        Nullable] public string    Udf1                 { get; set; } // nvarchar(512)
		[Column,        Nullable] public string    Udf2                 { get; set; } // nvarchar(512)
		[Column,        Nullable] public string    Udf3                 { get; set; } // nvarchar(512)

		#region Associations

		/// <summary>
		/// FK_Administration_UserClaim_Users_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="UserId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Administration_UserClaim> UserClaims { get; set; }

		/// <summary>
		/// FK_Administration_UserProfile_Users_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="UserId", CanBeNull=true, Relationship=Relationship.OneToOne, IsBackReference=true)]
		public Administration_UserProfile UserProfile { get; set; }

		#endregion
	}

	[Table(Schema="Administration", Name="UserClaim")]
	public partial class Administration_UserClaim
	{
		[Identity              ] public int    Ci         { get; set; } // int
		[PrimaryKey(1), NotNull] public Guid   UserId     { get; set; } // uniqueidentifier
		[PrimaryKey(2), NotNull] public string ClaimType  { get; set; } // nvarchar(256)
		[PrimaryKey(3), NotNull] public string ClaimValue { get; set; } // nvarchar(256)

		#region Associations

		/// <summary>
		/// FK_Administration_UserClaim_Users
		/// </summary>
		[Association(ThisKey="UserId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_Administration_UserClaim_Users", BackReferenceName="UserClaims")]
		public Administration_User User { get; set; }

		#endregion
	}

	[Table(Schema="Administration", Name="UserProfile")]
	public partial class Administration_UserProfile
	{
		[Identity               ] public int       Ci            { get; set; } // int
		[PrimaryKey, NotNull    ] public Guid      UserId        { get; set; } // uniqueidentifier
		[Column,     NotNull    ] public string    FirstName     { get; set; } // nvarchar(256)
		[Column,     NotNull    ] public string    LastName      { get; set; } // nvarchar(256)
		[Column,     NotNull    ] public Guid      UserTypeId    { get; set; } // uniqueidentifier
		[Column,        Nullable] public string    Title         { get; set; } // nvarchar(256)
		[Column,        Nullable] public string    Suffix        { get; set; } // nvarchar(256)
		[Column,        Nullable] public string    Prefix        { get; set; } // nvarchar(256)
		[Column,        Nullable] public string    PrefferedName { get; set; } // nvarchar(256)
		[Column,        Nullable] public DateTime? Dob           { get; set; } // date
		[Column,     NotNull    ] public Guid      GenderId      { get; set; } // uniqueidentifier
		[Column,     NotNull    ] public Guid      CountryId     { get; set; } // uniqueidentifier
		[Column,        Nullable] public string    Organization  { get; set; } // nvarchar(256)
		[Column,        Nullable] public string    Department    { get; set; } // nvarchar(256)
		[Column,        Nullable] public string    PictureUrl    { get; set; } // nvarchar(1024)
		[Column,        Nullable] public string    Udf1          { get; set; } // nvarchar(512)
		[Column,        Nullable] public string    Udf2          { get; set; } // nvarchar(512)
		[Column,        Nullable] public string    Udf3          { get; set; } // nvarchar(512)

		#region Associations

		/// <summary>
		/// FK_Administration_UserProfile_Users
		/// </summary>
		[Association(ThisKey="UserId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.OneToOne, KeyName="FK_Administration_UserProfile_Users", BackReferenceName="UserProfile")]
		public Administration_User User { get; set; }

		#endregion
	}

	public static partial class SqlFunctions
	{
		#region FuncCheckValidClaimType

		[Sql.Function(Name="Administration.FuncCheckValidClaimType", ServerSideOnly=true)]
		public static int? FuncCheckValidClaimType(string @claimType)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region FuncCheckValidClaimValue

		[Sql.Function(Name="Administration.FuncCheckValidClaimValue", ServerSideOnly=true)]
		public static int? FuncCheckValidClaimValue(string @claimValue)
		{
			throw new InvalidOperationException();
		}

		#endregion
	}

	public static partial class TableExtensions
	{
		public static Administration_User Find(this ITable<Administration_User> table, Guid Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static Administration_UserClaim Find(this ITable<Administration_UserClaim> table, Guid UserId, string ClaimType, string ClaimValue)
		{
			return table.FirstOrDefault(t =>
				t.UserId     == UserId    &&
				t.ClaimType  == ClaimType &&
				t.ClaimValue == ClaimValue);
		}

		public static Administration_UserProfile Find(this ITable<Administration_UserProfile> table, Guid UserId)
		{
			return table.FirstOrDefault(t =>
				t.UserId == UserId);
		}
	}
}

#pragma warning restore 1591
